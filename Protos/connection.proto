// This file contains initial connection setup messages,
// which are sent in a specific order (noted above the message).
// Other contained messages are for further connection management
// and should bewrapped in a generid client/server message.

syntax = "proto3";
package naki3d.common.protocol;


// Same for both peers, version for compatibility checks.
// Probably SEMVER?
message VersionInfo {
  uint32 major = 1;
  uint32 minor = 2;
  uint32 patch = 3;
  string build = 4;
}

enum PerformanceCap {
  PERFORMANCE_CAP_SLOW = 0;    // Can play video, perhaps display simple models (e.g. 2-core with Intel iGPU).
  PERFORMANCE_CAP_MEDIUM = 1;  // Slow + can display reasonably complex scenes, models with interaction (e.g. the current prototype mini PC)
  PERFORMANCE_CAP_FAST = 2;    // Medium + can work with/display more complex data, like point clouds or unoptimized meshes, volumetric data (for possible future display types)
}
enum SensorType {
  SENSOR_TYPE_GESTURE = 0;
  SENSOR_TYPE_IMAGE = 1;
  SENSOR_TYPE_DEPTH = 2;
  SENSOR_TYPE_LIGHT = 3;
  SENSOR_TYPE_MICROPHONE = 4;
  SENSOR_TYPE_IR = 5;
  SENSOR_TYPE_HANDTRACKING = 6;
}
enum DeviceType {
  DEVICE_TYPE_UNKNOWN = 0;
  DEVICE_TYPE_IPW = 1;
  DEVICE_TYPE_PGE = 2;
}

// (1) Device -> Server
message ConnectionRequest {
  string connection_id = 1; // *unique* ID of connecting PC (e.g. hostname)
  bytes public_key = 2;     // Used to later generate (or renew) a certificate for the device.
  // TODO: authentication? maybe rely on already present certificate?
}

// (2) Server -> Device
message ConnectionAcknowledgement {
  string connection_id = 1; // server echoes ID back
  bool verified = 2;        // whether the device is already known to the server
}

// Information for the server to filter out what content
// the device is capable of (interactively) displaying.
message DeviceDescriptor {
  DeviceType type = 1;
  PerformanceCap performanceCap = 2;
  // These sensors are expected to always be available:
  // Time, Mobile app
  repeated SensorType localSensors = 3;
}

// Basically an empty ping message, just to maintain connection.
message Ping {
}

// For setting up p2p encryption in case of 
message EncryptionInfo {
  bytes deviceCertificate = 1;        // Certificate signed by the server to identify the device.
  repeated bytes managementKeys = 2;  // Keys for remote management (without central server) authorization.
}